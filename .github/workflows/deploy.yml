name: Terraform Infrastructure Management

on:
  workflow_dispatch:
    inputs:
      action:
        description: 'Select action to perform'
        required: true
        type: choice
        options:
        - deploy
        - destroy

jobs:
  deploy:
    name: Terraform Deploy
    if: github.event.inputs.action == 'deploy'
    runs-on: ubuntu-latest
    environment:
      name: staging
      url: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}
    
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v3

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v2
      with:
        terraform_version: 1.9.8

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ vars.AWS_REGION }}

    - name: Get Session Token
      run: echo aws sts get-session-token

    - name: Check ECR Repositories
      id: check-ecr
      run: |
        if aws ecr describe-repositories --repository-names presigned-lambda-repo auth-lambda-repo 2>/dev/null; then
          echo "ECR repositories exist, importing to Terraform state..."
          terraform init
          terraform import module.ecr.aws_ecr_repository.presigned_lambda_repo presigned-lambda-repo
          terraform import module.ecr.aws_ecr_repository.auth_lambda_repo auth-lambda-repo
        else
          echo "ECR repositories don't exist, proceeding with normal deployment"
        fi
      working-directory: ./src
      continue-on-error: true
    
    - name: Initialize Terraform
      working-directory: ./src
      run: terraform init

    - name: Terraform Plan
      working-directory: ./src
      run: terraform plan -out=tfplan

    - name: Manual Approval
      uses: trstringer/manual-approval@v1
      with:
        secret: ${{ github.token }}
        approvers: ${{ github.actor }}
        minimum-approvals: 1

    - name: Terraform Apply
      working-directory: ./src
      run: terraform apply -auto-approve tfplan

  destroy:
    name: Terraform Destroy
    if: github.event.inputs.action == 'destroy'
    runs-on: ubuntu-latest
    environment:
      name: staging
      url: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}

    steps:
    - name: Checkout Repository
      uses: actions/checkout@v3

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v2
      with:
        terraform_version: 1.9.8

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ vars.AWS_REGION }}

    - name: Get Session Token
      run: echo aws sts get-session-token        

    - name: Initialize Terraform
      working-directory: ./src
      run: terraform init

    - name: Terraform Plan Destroy
      working-directory: ./src
      run: terraform plan -destroy -out=tfplan

    - name: Manual Approval
      uses: trstringer/manual-approval@v1
      with:
        secret: ${{ github.token }}
        approvers: ${{ github.actor }}
        minimum-approvals: 1

    - name: Terraform Apply Destroy
      working-directory: ./src
      run: terraform apply -auto-approve tfplan
